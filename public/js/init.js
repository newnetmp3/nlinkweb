(() => {
  // ns-hugo:/home/scott/.cache/hugo_cache/modules/filecache/modules/pkg/mod/github.com/hbstack/header/modules/theme-toggle@v0.5.2/assets/hb/modules/header-theme-toggle/init/index.ts
  (() => {
    "use strict";
    const THEME_AUTO = "auto";
    const THEME_DARK = "dark";
    const THEME_LIGHT = "light";
    const THEME_KEY = "hb-theme";
    const getPreferredTheme = () => {
      return window.matchMedia && window.matchMedia("(prefers-color-scheme: dark)").matches ? THEME_DARK : THEME_LIGHT;
    };
    const getTheme = () => {
      const v = localStorage.getItem(THEME_KEY);
      return v ? v : THEME_AUTO;
    };
    const setTheme = (theme2, save = false) => {
      save && localStorage.setItem(THEME_KEY, theme2);
      const value = theme2 === THEME_AUTO ? getPreferredTheme() : theme2;
      document.documentElement.setAttribute("data-bs-theme", value);
      onSet(value);
    };
    const onSet = (theme2) => {
      const event = new CustomEvent("hb:theme", { detail: { theme: theme2 } });
      document.dispatchEvent(event);
    };
    const activeTheme = (theme2) => {
      let name = "";
      document.querySelectorAll("[data-bs-theme-value]").forEach((toggle) => {
        if (toggle.getAttribute("data-bs-theme-value") === theme2) {
          toggle.classList.add("active");
          name = toggle.getAttribute("data-bs-theme-name") ?? "";
        } else {
          toggle.classList.remove("active");
        }
      });
      const newIcon = document.body.querySelector(`[data-bs-theme-value="${theme2}"] svg`)?.cloneNode(true);
      const oldIcon = document.body.querySelector(".btn-theme-toggle svg");
      oldIcon?.replaceWith(newIcon);
      const nameEle = document.querySelector(".theme-toggle .theme-name");
      nameEle.innerHTML = name;
    };
    const theme = getTheme();
    setTheme(theme);
    window.addEventListener("DOMContentLoaded", () => {
      activeTheme(theme);
      window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change", (e) => {
        if (getTheme() !== THEME_AUTO) {
          return;
        }
        setTheme(e.matches ? THEME_DARK : THEME_LIGHT);
      });
      const activeToggle = (toggle) => {
        const v = toggle.getAttribute("data-bs-theme-value");
        const theme2 = v ? v : THEME_AUTO;
        setTheme(theme2, true);
        activeTheme(theme2);
      };
      const toggles = document.querySelectorAll("[data-bs-theme-value]");
      toggles.forEach((toggle) => {
        toggle.addEventListener("click", () => {
          activeToggle(toggle);
        });
      });
      const btnToggle = document.querySelector(".btn-theme-toggle");
      if (btnToggle !== null && btnToggle.getAttribute("data-style") === "switch") {
        btnToggle.addEventListener("click", () => {
          let next = 0;
          toggles.forEach((toggle, i) => {
            if (toggle.classList.contains("active")) {
              next = i + 1;
              return;
            }
          });
          if (next >= toggles.length) {
            next = 0;
          }
          activeToggle(toggles[next]);
        });
      }
    });
  })();
})();
//# sourceMappingURL=data:application/json;base64,
